# -*- coding: utf-8 -*-
"""titan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14WMp-ln_NHqyBfVt89xCXQC-P0xBI5mz
"""

# -*- coding: utf-8 -*-
"""
Created on Sat Aug 29 13:34:49 2020

@author: grago
"""
import tensorflow as tf
import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.layers import Dropout,BatchNormalization, Dense, Softmax
#from tensorflow.keras.regularizers import l2


import os
train_path = "t_train.csv"
train = pd.read_csv(train_path)

corr_mat = train.corr()
print(corr_mat['Survived'].sort_values(ascending = False))

train.drop("PassengerId", axis = 1, inplace = True)
#train.drop("Pclass", axis = 1, inplace = True)
train.drop("Name", axis = 1, inplace = True)
train.drop("SibSp", axis = 1, inplace = True)
train.drop("Ticket", axis = 1, inplace = True)
train.drop("Parch", axis = 1, inplace = True)
#train.drop("Fare", axis = 1, inplace = True)
train.drop("Embarked", axis = 1, inplace = True)
train.drop("Cabin", axis = 1, inplace = True)
#train.drop("Age", axis = 1, inplace = True)
median = train["Age"].median()
train["Age"].fillna(median, inplace = True)
train["Age"] = train["Age"] / 100.


# Fare preprocessing 
max = train["Fare"].max()
train["Fare"] = train["Fare"] / max

#New Column

FxP = (train['Fare'] * np.reciprocal(train["Pclass"], dtype = "float32"))
train['FxP'] = FxP


test_path = "t_test.csv"
test = pd.read_csv(test_path)
test.drop("PassengerId", axis = 1, inplace = True)
#test.drop("Pclass", axis = 1, inplace = True)
test.drop("Name", axis = 1, inplace = True)
test.drop("SibSp", axis = 1, inplace = True)
test.drop("Ticket", axis = 1, inplace = True)
test.drop("Parch", axis = 1, inplace = True)
#test.drop("Fare", axis = 1, inplace = True)
test.drop("Embarked", axis = 1, inplace = True)
test.drop("Cabin", axis = 1, inplace = True)
#test.drop("Age", axis = 1, inplace = True)
median = test["Age"].median()
test["Age"].fillna(median, inplace = True)
test["Age"] = test["Age"] / 100.

# Fare preprocessing 
max = test["Fare"].max()
test["Fare"] = test["Fare"] / max

#New Column

FxP = (test['Fare'] * np.reciprocal(test["Pclass"], dtype = "float32"))
test['FxP'] = FxP

for i in range(len(train["Sex"])):
    if (train["Sex"][i] == 'female'):
        train["Sex"][i] = 0
    else:
        train["Sex"][i] = 1
     
for i in range(len(test["Sex"])):
    if (test["Sex"][i] == 'female'):
        test["Sex"][i] = 0
    else:
        test["Sex"][i] = 1




target = train["Survived"]
train.drop("Survived", axis = 1, inplace = True)

data = np.array(train, dtype = 'float32')


from sklearn.model_selection import train_test_split
X_train, X_valid, y_train, y_valid = train_test_split(data, target, train_size = 0.3, shuffle = True)


model = Sequential([
        Dense(64, activation = 'elu', input_shape = (5,)),
        BatchNormalization(),
        Dropout(0.5),
        Dense(32, activation = 'elu'),
        BatchNormalization(),
        Dropout(0.5),
        Dense(32, activation = 'elu'),
        BatchNormalization(),
        Dense(16, activation = 'elu'),
        BatchNormalization(),
        Dropout(0.5),
        Dense(8, activation = 'elu'),
        BatchNormalization(),
        Dense(4, activation = 'elu'),
        BatchNormalization(),
        Dense(4, activation = 'elu'),
        Dense(1, activation = 'sigmoid'),
])
ckpt_path = "best.ckpt"
ckpt = ModelCheckpoint(
    filepath= ckpt_path,
    save_best_only = True,
    save_weights_only = True,
    verbose = 1,
    monitor = 'val_loss'
)
model.compile(loss = 'binary_crossentropy', optimizer= 'adam', metrics = ['acc'])
model.fit(X_train, y_train, epochs = 1000, validation_data = (X_valid, y_valid), callbacks = [ckpt])
model.load_weights(ckpt_path)

output = model.predict(np.array(test, dtype = 'float32'))
print('PassengerId,Survived')

for i in range(len(output)):
    j = str(i + 892)
    if(output[i] < 0.5):
        print(j+',0')
    else:
        print(j+',1')

