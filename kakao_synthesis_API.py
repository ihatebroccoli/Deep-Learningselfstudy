{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "kakao synthesis API.py",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMXcPfrMluq3kEosduIPzrY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ihatebroccoli/Deep-Learningselfstudy/blob/master/kakao_synthesis_API.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SPhwlPukAGnr"
      },
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"\n",
        "Spyder Editor\n",
        "\n",
        "This is a temporary script file.\n",
        "\"\"\"\n",
        "\n",
        "\n",
        "from bs4 import BeautifulSoup as bs\n",
        "import urllib.request\n",
        "import urllib.parse\n",
        "from selenium import webdriver\n",
        "import time\n",
        "import pandas as pd\n",
        "from selenium.webdriver.support.ui import Select\n",
        "import random\n",
        "url = \"https://speech-api.kakao.com/\"\n",
        "\n",
        "\n",
        "driver = webdriver.Chrome()\n",
        "driver.get(url)\n",
        "text_box = driver.find_element_by_id('txtDemo')\n",
        "button = driver.find_element_by_class_name('btn_listen')\n",
        "\n",
        "select_click = driver.find_element_by_xpath('//*[@id=\"speechSynthesis\"]/div/div[2]/ul/li[5]/div/div[1]') #click select voice box\n",
        "select_click.click()\n",
        "select_click_after = driver.find_element_by_xpath('//*[@id=\"speechSynthesis\"]/div/div[2]/ul/li[5]/div/div[2]/div[1]') #click voice // 1 spring 2 ryan 3 naomi\n",
        "select_click_after.click()\n",
        "\n",
        "select_click = driver.find_element_by_id('txtDemo_ssml_btn') # Use SSML\n",
        "select_click.click()\n",
        "\n",
        "for_speed= ['0.8', '0.9', '1.1', '1.2', '1.3']\n",
        "\n",
        "\n",
        "def spell_out(txt):\n",
        "    # spell out\n",
        "    begin = '<say-as interpret-as=\\\"spell-out\\\">'\n",
        "    end = \"</say-as>\"\n",
        "    if 'IPC' in txt:\n",
        "        parts = txt.split('IPC')\n",
        "        txt = parts[0] + begin + 'IPC'\n",
        "        txt = txt + end + parts[1]\n",
        "    elif 'AMM' in txt:\n",
        "        parts = txt.split('AMM')\n",
        "        txt = parts[0] + begin + 'AMM'\n",
        "        txt = txt + end + parts[1]        \n",
        "    return txt\n",
        "\n",
        "def speed(txt, speed_opt): #adjust speed\n",
        "    \n",
        "    begin = \"<prosody rate=\\\"\" + for_speed[speed_opt] + \"\\\">\"\n",
        "    end= \"</prosody>\"\n",
        "    txt = begin + txt + end\n",
        "    return txt\n",
        "\n",
        "def volume(txt): #adjust volume\n",
        "    for_begin= ['\\\"soft\\\"', '\\\"loud\\\"']\n",
        "    begin = \"<prosody volume=\" + for_begin[random.randrange(0,2)] + \">\"\n",
        "    end= \"</prosody>\"\n",
        "    txt = begin + txt + end\n",
        "    return txt\n",
        "\n",
        "def friendly(txt):#voice _ friendly\n",
        "    return '<kakao:effect tone = \\\"friendly\\\">' + txt + '</kakao:effect>'\n",
        "\n",
        "def add_ssml(txt, speed_opt):\n",
        "    \n",
        "    txt = speed(txt, speed_opt)\n",
        "    if ('IPC' in txt or 'AMM' in txt):\n",
        "        txt = spell_out(txt)\n",
        "    \n",
        "    txt = friendly(txt)\n",
        "    txt = \"<speak>\" + txt + \"</speak>\"\n",
        "    return txt\n",
        "\n",
        "inst_file = pd.read_csv(\"instr.csv\", encoding = 'CP949')\n",
        "instruction_list = inst_file['instruction']\n",
        "url_list = []\n",
        "\n",
        "for i in range(len(instruction_list)):\n",
        "    text_box.click()\n",
        "    erase = driver.find_element_by_class_name('close_btn') \n",
        "    erase.click() # erase default, old data\n",
        "        \n",
        "    text_box.send_keys(add_ssml(instruction_list[i], j)) # type the data\n",
        "    button.click()\n",
        "        \n",
        "    time.sleep(1)\n",
        "        \n",
        "    audio = driver.find_element_by_id('audioPlayer')\n",
        "    audio_name = audio.get_attribute('src')\n",
        "        \n",
        "    urllib.request.urlretrieve(audio_name,\"./kakao_Plain_Spring_S(\" + for_speed[j] + \")_Spell/\"+\"kakao_Plain_Spring_S(\" + for_speed[j] + \")_Spell\" + instruction_list[i] + '.mp3')\n",
        "    time.sleep(4)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}